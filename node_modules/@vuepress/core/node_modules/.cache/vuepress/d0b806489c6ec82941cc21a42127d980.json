{"remainingRequest":"/Users/kying-star/Desktop/未命名文件夹/kying-star.github.io/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/kying-star/Desktop/未命名文件夹/kying-star.github.io/node_modules/@vuepress/core/lib/client/root-mixins/updateMeta.js","dependencies":[{"path":"/Users/kying-star/Desktop/未命名文件夹/kying-star.github.io/node_modules/@vuepress/core/lib/client/root-mixins/updateMeta.js","mtime":1637485441478},{"path":"/Users/kying-star/Desktop/未命名文件夹/kying-star.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1637485443402},{"path":"/Users/kying-star/Desktop/未命名文件夹/kying-star.github.io/node_modules/babel-loader/lib/index.js","mtime":1637485443242}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMva3lpbmctc3Rhci9EZXNrdG9wL1x1NjcyQVx1NTQ3RFx1NTQwRFx1NjU4N1x1NEVGNlx1NTkzOS9reWluZy1zdGFyLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL1VzZXJzL2t5aW5nLXN0YXIvRGVza3RvcC9cdTY3MkFcdTU0N0RcdTU0MERcdTY1ODdcdTRFRjZcdTU5Mzkva3lpbmctc3Rhci5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkiOwppbXBvcnQgdW5pb25CeSBmcm9tICdsb2Rhc2gvdW5pb25CeSc7CmV4cG9ydCBkZWZhdWx0IHsKICAvLyBjcmVhdGVkIHdpbGwgYmUgY2FsbGVkIG9uIGJvdGggY2xpZW50IGFuZCBzc3IKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5zaXRlTWV0YSA9IHRoaXMuJHNpdGUuaGVhZFRhZ3MuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDEpLAogICAgICAgICAgaGVhZGVyVHlwZSA9IF9yZWYyWzBdOwoKICAgICAgcmV0dXJuIGhlYWRlclR5cGUgPT09ICdtZXRhJzsKICAgIH0pLm1hcChmdW5jdGlvbiAoX3JlZjMpIHsKICAgICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLAogICAgICAgICAgXyA9IF9yZWY0WzBdLAogICAgICAgICAgaGVhZGVyVmFsdWUgPSBfcmVmNFsxXTsKCiAgICAgIHJldHVybiBoZWFkZXJWYWx1ZTsKICAgIH0pOwoKICAgIGlmICh0aGlzLiRzc3JDb250ZXh0KSB7CiAgICAgIHZhciBtZXJnZWRNZXRhSXRlbXMgPSB0aGlzLmdldE1lcmdlZE1ldGFUYWdzKCk7CiAgICAgIHRoaXMuJHNzckNvbnRleHQudGl0bGUgPSB0aGlzLiR0aXRsZTsKICAgICAgdGhpcy4kc3NyQ29udGV4dC5sYW5nID0gdGhpcy4kbGFuZzsKICAgICAgdGhpcy4kc3NyQ29udGV4dC5wYWdlTWV0YSA9IHJlbmRlclBhZ2VNZXRhKG1lcmdlZE1ldGFJdGVtcyk7CiAgICB9CiAgfSwKICAvLyBPdGhlciBsaWZlIGN5Y2xlcyB3aWxsIG9ubHkgYmUgY2FsbGVkIGF0IGNsaWVudAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAvLyBpbml0IGN1cnJlbnRNZXRhVGFncyBmcm9tIERPTQogICAgdGhpcy5jdXJyZW50TWV0YVRhZ3MgPSBfdG9Db25zdW1hYmxlQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbWV0YScpKTsgLy8gdXBkYXRlIHRpdGxlIC8gbWV0YSB0YWdzCgogICAgdGhpcy51cGRhdGVNZXRhKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICB1cGRhdGVNZXRhOiBmdW5jdGlvbiB1cGRhdGVNZXRhKCkgewogICAgICBkb2N1bWVudC50aXRsZSA9IHRoaXMuJHRpdGxlOwogICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IHRoaXMuJGxhbmc7CiAgICAgIHZhciBuZXdNZXRhVGFncyA9IHRoaXMuZ2V0TWVyZ2VkTWV0YVRhZ3MoKTsKICAgICAgdGhpcy5jdXJyZW50TWV0YVRhZ3MgPSB1cGRhdGVNZXRhVGFncyhuZXdNZXRhVGFncywgdGhpcy5jdXJyZW50TWV0YVRhZ3MpOwogICAgfSwKICAgIGdldE1lcmdlZE1ldGFUYWdzOiBmdW5jdGlvbiBnZXRNZXJnZWRNZXRhVGFncygpIHsKICAgICAgdmFyIHBhZ2VNZXRhID0gdGhpcy4kcGFnZS5mcm9udG1hdHRlci5tZXRhIHx8IFtdOyAvLyBwYWdlTWV0YVRhZ3MgaGF2ZSBoaWdoZXIgcHJpb3JpdHkgdGhhbiBzaXRlTWV0YVRhZ3MKICAgICAgLy8gZGVzY3JpcHRpb24gbmVlZHMgc3BlY2lhbCBhdHRlbnRpb24gYXMgaXQgaGFzIHRvbyBtYW55IGVudHJpZXMKCiAgICAgIHJldHVybiB1bmlvbkJ5KFt7CiAgICAgICAgbmFtZTogJ2Rlc2NyaXB0aW9uJywKICAgICAgICBjb250ZW50OiB0aGlzLiRkZXNjcmlwdGlvbgogICAgICB9XSwgcGFnZU1ldGEsIHRoaXMuc2l0ZU1ldGEsIG1ldGFJZGVudGlmaWVyKTsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICAkcGFnZTogZnVuY3Rpb24gJHBhZ2UoKSB7CiAgICAgIHRoaXMudXBkYXRlTWV0YSgpOwogICAgfQogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIHVwZGF0ZU1ldGFUYWdzKG51bGwsIHRoaXMuY3VycmVudE1ldGFUYWdzKTsKICB9Cn07Ci8qKgogKiBSZXBsYWNlIGN1cnJlbnRNZXRhVGFncyB3aXRoIG5ld01ldGFUYWdzCiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gbmV3TWV0YVRhZ3MKICogQHBhcmFtIHtBcnJheTxIVE1MRWxlbWVudD59IGN1cnJlbnRNZXRhVGFncwogKiBAcmV0dXJucyB7QXJyYXk8SFRNTEVsZW1lbnQ+fQogKi8KCmZ1bmN0aW9uIHVwZGF0ZU1ldGFUYWdzKG5ld01ldGFUYWdzLCBjdXJyZW50TWV0YVRhZ3MpIHsKICBpZiAoY3VycmVudE1ldGFUYWdzKSB7CiAgICBfdG9Db25zdW1hYmxlQXJyYXkoY3VycmVudE1ldGFUYWdzKS5maWx0ZXIoZnVuY3Rpb24gKGMpIHsKICAgICAgcmV0dXJuIGMucGFyZW50Tm9kZSA9PT0gZG9jdW1lbnQuaGVhZDsKICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsKICAgICAgcmV0dXJuIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoYyk7CiAgICB9KTsKICB9CgogIGlmIChuZXdNZXRhVGFncykgewogICAgcmV0dXJuIG5ld01ldGFUYWdzLm1hcChmdW5jdGlvbiAobSkgewogICAgICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWV0YScpOwogICAgICBPYmplY3Qua2V5cyhtKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICB0YWcuc2V0QXR0cmlidXRlKGtleSwgbVtrZXldKTsKICAgICAgfSk7CiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodGFnKTsKICAgICAgcmV0dXJuIHRhZzsKICAgIH0pOwogIH0KfQovKioKICogVHJ5IHRvIGlkZW50aWZ5IGEgbWV0YSB0YWcgYnkgbmFtZSwgcHJvcGVydHkgb3IgaXRlbXByb3AKICoKICogUmV0dXJuIGEgY29tcGxldGUgc3RyaW5nIGlmIG5vbmUgcHJvdmlkZWQKICogQHBhcmFtIHtPYmplY3R9IHRhZyBmcm9tIGZyb250bWF0dGVyIG9yIHNpdGVNZXRhVGFncwogKiBAcmV0dXJucyB7U3RyaW5nfQogKi8KCgpmdW5jdGlvbiBtZXRhSWRlbnRpZmllcih0YWcpIHsKICBmb3IgKHZhciBfaSA9IDAsIF9hcnIgPSBbJ25hbWUnLCAncHJvcGVydHknLCAnaXRlbXByb3AnXTsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykgewogICAgdmFyIGl0ZW0gPSBfYXJyW19pXTsKICAgIGlmICh0YWcuaGFzT3duUHJvcGVydHkoaXRlbSkpIHJldHVybiB0YWdbaXRlbV0gKyBpdGVtOwogIH0KCiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRhZyk7Cn0KLyoqCiAqIFJlbmRlciBtZXRhIHRhZ3MKICoKICogQHBhcmFtIHtBcnJheX0gbWV0YQogKiBAcmV0dXJucyB7U3RyaW5nfQogKi8KCgpmdW5jdGlvbiByZW5kZXJQYWdlTWV0YShtZXRhKSB7CiAgaWYgKCFtZXRhKSByZXR1cm4gJyc7CiAgcmV0dXJuIG1ldGEubWFwKGZ1bmN0aW9uIChtKSB7CiAgICB2YXIgcmVzID0gIjxtZXRhIjsKICAgIE9iamVjdC5rZXlzKG0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICByZXMgKz0gIiAiLmNvbmNhdChrZXksICI9XCIiKS5jb25jYXQobVtrZXldLCAiXCIiKTsKICAgIH0pOwogICAgcmV0dXJuIHJlcyArICI+IjsKICB9KS5qb2luKCdcbiAgICAnKTsKfQ=="},{"version":3,"sources":["/Users/kying-star/Desktop/未命名文件夹/kying-star.github.io/node_modules/@vuepress/core/lib/client/root-mixins/updateMeta.js"],"names":["unionBy","created","siteMeta","$site","headTags","filter","headerType","map","_","headerValue","$ssrContext","mergedMetaItems","getMergedMetaTags","title","$title","lang","$lang","pageMeta","renderPageMeta","mounted","currentMetaTags","document","querySelectorAll","updateMeta","methods","documentElement","newMetaTags","updateMetaTags","$page","frontmatter","meta","name","content","$description","metaIdentifier","watch","beforeDestroy","c","parentNode","head","forEach","removeChild","m","tag","createElement","Object","keys","key","setAttribute","appendChild","item","hasOwnProperty","JSON","stringify","res","join"],"mappings":"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","sourcesContent":["import unionBy from 'lodash/unionBy'\n\nexport default {\n  // created will be called on both client and ssr\n  created () {\n    this.siteMeta = this.$site.headTags\n      .filter(([headerType]) => headerType === 'meta')\n      .map(([_, headerValue]) => headerValue)\n\n    if (this.$ssrContext) {\n      const mergedMetaItems = this.getMergedMetaTags()\n\n      this.$ssrContext.title = this.$title\n      this.$ssrContext.lang = this.$lang\n      this.$ssrContext.pageMeta = renderPageMeta(mergedMetaItems)\n    }\n  },\n  // Other life cycles will only be called at client\n  mounted () {\n    // init currentMetaTags from DOM\n    this.currentMetaTags = [...document.querySelectorAll('meta')]\n\n    // update title / meta tags\n    this.updateMeta()\n  },\n\n  methods: {\n    updateMeta () {\n      document.title = this.$title\n      document.documentElement.lang = this.$lang\n\n      const newMetaTags = this.getMergedMetaTags()\n      this.currentMetaTags = updateMetaTags(newMetaTags, this.currentMetaTags)\n    },\n\n    getMergedMetaTags () {\n      const pageMeta = this.$page.frontmatter.meta || []\n      // pageMetaTags have higher priority than siteMetaTags\n      // description needs special attention as it has too many entries\n      return unionBy([{ name: 'description', content: this.$description }],\n        pageMeta, this.siteMeta, metaIdentifier)\n    }\n  },\n\n  watch: {\n    $page () {\n      this.updateMeta()\n    }\n  },\n\n  beforeDestroy () {\n    updateMetaTags(null, this.currentMetaTags)\n  }\n}\n\n/**\n * Replace currentMetaTags with newMetaTags\n * @param {Array<Object>} newMetaTags\n * @param {Array<HTMLElement>} currentMetaTags\n * @returns {Array<HTMLElement>}\n */\nfunction updateMetaTags (newMetaTags, currentMetaTags) {\n  if (currentMetaTags) {\n    [...currentMetaTags]\n          .filter(c => c.parentNode === document.head)\n          .forEach(c => document.head.removeChild(c))\n  }\n  if (newMetaTags) {\n    return newMetaTags.map(m => {\n      const tag = document.createElement('meta')\n      Object.keys(m).forEach(key => {\n        tag.setAttribute(key, m[key])\n      })\n      document.head.appendChild(tag)\n      return tag\n    })\n  }\n}\n\n/**\n * Try to identify a meta tag by name, property or itemprop\n *\n * Return a complete string if none provided\n * @param {Object} tag from frontmatter or siteMetaTags\n * @returns {String}\n */\nfunction metaIdentifier (tag) {\n  for (const item of ['name', 'property', 'itemprop']) {\n    if (tag.hasOwnProperty(item)) return tag[item] + item\n  }\n  return JSON.stringify(tag)\n}\n\n/**\n * Render meta tags\n *\n * @param {Array} meta\n * @returns {String}\n */\n\nfunction renderPageMeta (meta) {\n  if (!meta) return ''\n  return meta.map(m => {\n    let res = `<meta`\n    Object.keys(m).forEach(key => {\n      res += ` ${key}=\"${m[key]}\"`\n    })\n    return res + `>`\n  }).join('\\n    ')\n}\n"]}]}