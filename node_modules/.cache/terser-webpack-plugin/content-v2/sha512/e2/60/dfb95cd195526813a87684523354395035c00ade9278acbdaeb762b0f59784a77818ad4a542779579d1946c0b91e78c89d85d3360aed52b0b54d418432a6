{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{624:function(t,o,r){\"use strict\";r.r(o);var e=r(5),a=Object(e.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"monorepo\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#monorepo\"}},[t._v(\"#\")]),t._v(\" Monorepo\")]),t._v(\" \"),r(\"h4\",{attrs:{id:\"monorepo-一种项目管理方案-多个项目放在同一个文件夹下面\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#monorepo-一种项目管理方案-多个项目放在同一个文件夹下面\"}},[t._v(\"#\")]),t._v(\" Monorepo (一种项目管理方案:多个项目放在同一个文件夹下面)\")]),t._v(\" \"),r(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75a56317bdf94794a8b29f6cd184c888~tplv-k3u1fbpfcp-watermark.awebp\"}}),t._v(\" \"),r(\"h5\",{attrs:{id:\"multi-repository-将项目分文件夹管理-的缺点\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#multi-repository-将项目分文件夹管理-的缺点\"}},[t._v(\"#\")]),t._v(\" Multi Repository(将项目分文件夹管理)的缺点:\")]),t._v(\" \"),r(\"p\",[t._v(\"1、代码难以复用  - 获取某一个工具库需要下载那个依赖的包，但如果依赖的代码出错，就需要修改依赖源头的代码，然后在上传到npm上，然后再在本项目重新拉取那个包的依赖。这样的流程过于麻烦了。\")]),t._v(\" \"),r(\"p\",[t._v(\"2、版本的管理 : 依赖的升级困难，如果多个项目都需要使用某一个包，这个包的依赖版本升级时，所有依赖于这个包的项目都需要做对应的更新。\")]),t._v(\" \"),r(\"p\",[t._v(\"3、项目的基建 : 组织下的多个项目无法做归一化的流程管理，会加大项目管理的复杂度，难以维护。\")]),t._v(\" \"),r(\"h5\",{attrs:{id:\"monorepo的好处\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#monorepo的好处\"}},[t._v(\"#\")]),t._v(\" Monorepo的好处:\")]),t._v(\" \"),r(\"p\",[r(\"strong\",[t._v(\"工作流的一致性\")])]),t._v(\" \"),r(\"p\",[t._v(\"所有项目都放在一个仓库里，复用起来非常方便，当某一个包更新时，所有依赖这个包的项目都会感知到这个更新。保证依赖的统一。\")]),t._v(\" \"),r(\"p\",[r(\"strong\",[t._v(\"项目基建成本的降低\")])]),t._v(\" \"),r(\"p\",[t._v(\"因为所有项目都在归一化的流程中开发\")]),t._v(\" \"),r(\"p\",[r(\"strong\",[t._v(\"团队协作也更加容易\")])])])}),[],!1,null,null,null);o.default=a.exports}}]);","extractedComments":[]}